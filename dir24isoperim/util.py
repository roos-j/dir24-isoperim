class Log: lvl = 0    

def log(msg, indent=-1, end="\n"):
    if indent < 0: indent = Log.lvl
    print(indent*3*" " + msg, end=end)

def err(msg): log(FMT_FAIL%"Error: " + msg)

def warn(msg): log(FMT_WARN%"Warning: " + msg)

FMT_PASS = "\033[1;92m%s\033[0m"
FMT_FAIL = "\033[1;91m%s\033[0m"
FMT_WARN = "\033[1;93m%s\033[0m"


_preamble = \
'''# This file is automatically generated
# Any changes may be overwritten

# Format: partition into intervals = [ x1, x2, x3, ... ]
# partition into rectangles = [ ((xmin, xmax), (ymin, ymax)), ... ]

'''

class Output:
    '''Manage output of partition data to file.'''
    _inst = None

    def get_instance():
        if Output._inst is None: Output._inst = Output()
        return Output._inst

    def __init__(self):
        self._fh = None
        Output._inst = self
    
    def open(self, filename):
        try:
            self._fh = open(filename, "w")
            self._fh.write(_preamble)
            return True
        except IOError:
            err("Couldn't write to file '%s'"%filename)
            self._fh = None
            return False
    
    def write(self, data):
        if self._fh == None: return
        try:
            self._fh.write(data)
        except IOError:        
            err("Error while writing to file.")
            self._fh = None

    def write_comment(self, comment):
        self.write("# %s\n"%comment)

    def write_part(self, lbl, part, comment):
        self.write_comment(comment)
        self.write("%s = %s\n\n"%(lbl, repr(part)))

    def close(self):
        if not self._fh is None:
            self._fh.close()
            self._fh = None